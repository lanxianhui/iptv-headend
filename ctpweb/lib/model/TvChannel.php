<?php


 /**
  * TvChannel Value Object.
  * This class is value object representing database table TvChannel
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */




class TvChannel {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    var $id;
    var $name;
    var $ipAdress;
    var $port;
    var $unicastUrl;
    var $lcn;
    var $icon;
    var $preRoll;
    var $postRoll;
    var $enabled;

    var $programs;


    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    function TvChannel () {

    }

    /* function TvChannel ($idIn) {

          $this->id = $idIn;

    } */


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    function getId() {
          return $this->id;
    }
    function setId($idIn) {
          $this->id = (int)$idIn;
    }

    function getName() {
          return $this->name;
    }
    function setName($nameIn) {
          $this->name = $nameIn;
    }

    function getIpAdress() {
          return $this->ipAdress;
    }
    function setIpAdress($ipAdressIn) {
          $this->ipAdress = $ipAdressIn;
    }

    function getPort() {
          return $this->port;
    }
    function setPort($portIn) {
          $this->port = (int)$portIn;
    }
    
	function getUnicastUrl() {
          return $this->unicastUrl;
    }
    function setUnicastUrl($unicastUrlIn) {
          $this->unicastUrl = $unicastUrlIn;
    }

    function getIcon() {
          return $this->icon;
    }
    function setIcon($iconIn) {
          $this->icon = $iconIn;
    }
    
    function getLCN() {
    	  return $this->lcn;
    }
    function setLCN($lcnIn) {
    	  $this->lcn = (int)$lcnIn;
    }
    
    function getEnabled() {
    	  return $this->enabled;
    }
	function setEnabled($enabledIn) {
    	  $this->enabled = $enabledIn;
    }
    
    function getPreRoll() {
    	return $this->preRoll;
    }
    function setPreRoll($preRollIn) {
    	$this->preRoll = (int)$preRollIn;
    }
    
	function getPostRoll() {
    	return $this->postRoll;
    }
    function setPostRoll($postRollIn) {
    	$this->postRoll = (int)$postRollIn;
    }
    
    function getPrograms() {
    	  return $this->programs;
    }
    function setPrograms(&$programs) {
    	  $this->programs = $programs;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    function setAll($idIn,
          $nameIn,
          $ipAdressIn,
          $portIn,
          $unicastUrlIn,
          $lcnIn,
          $iconIn,
          $preRollIn,
          $postRollIn,
          $enabledIn) {
          $this->id = (int)$idIn;
          $this->name = $nameIn;
          $this->ipAdress = $ipAdressIn;
          $this->port = (int)$portIn;
          $this->unicastUrl = $unicastUrlIn;
          $this->lcn = (int)$lcnIn;
          $this->preRoll = (int)$preRollIn;
          $this->postRoll = (int)$postRollIn;
          $this->icon = $iconIn;
          $this->enabled = $enabledIn;
    }


    /** 
     * hasEqualMapping-method will compare two TvChannel instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    function hasEqualMapping($valueObject) {

          if ($valueObject->getId() != $this->id) {
                    return(false);
          }
          if ($valueObject->getName() != $this->name) {
                    return(false);
          }
          if ($valueObject->getIpAdress() != $this->ipAdress) {
                    return(false);
          }
          if ($valueObject->getPort() != $this->port) {
                    return(false);
          }
    	  if ($valueObject->getUnicastUrl() != $this->unicastUrl) {
                    return(false);
          }
    	  if ($valueObject->getLCN() != $this->lcn) {
                    return(false);
          }
          if ($valueObject->getIcon() != $this->icon) {
                    return(false);
          }
    	  if ($valueObject->getPreRoll() != $this->preRoll) {
                    return(false);
          }
    	  if ($valueObject->getPostRoll() != $this->postRoll) {
                    return(false);
          }
    	  if ($valueObject->getEnabled() != $this->enabled) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    function __toString() {
        $out = $this->getDaogenVersion();
        $out = $out."\nclass TvChannel, mapping to table TvChannel\n";
        $out = $out."Persistent attributes: \n"; 
        $out = $out."id = ".$this->id."\n"; 
        $out = $out."name = ".$this->name."\n"; 
        $out = $out."ipAdress = ".$this->ipAdress."\n"; 
        $out = $out."port = ".$this->port."\n"; 
        $out = $out."lcn = ".$this->lcn."\n";
        $out = $out."icon = ".$this->icon."\n";
        $out = $out."preRoll = ".$this->preRoll."\n";
        $out = $out."postRoll = ".$this->postRoll."\n";
        $out = $out."enabled = ".$this->enabled."\n"; 
        return $out;
    }
/**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    function __clone() {
        $cloned = new TvChannel();

        $cloned->setId($this->id); 
        $cloned->setName($this->name); 
        $cloned->setIpAdress($this->ipAdress); 
        $cloned->setPort($this->port);
        $cloned->setUnicastUrl($this->unicastUrl);  
        $cloned->setIcon($this->icon); 
        $cloned->setLCN($this->lcn);
        $cloned->setPreRoll($this->preRoll);
        $cloned->setPostRoll($this->postRoll);
        $cloned->setEnabled($this->enabled);

        return $cloned;
    }

    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    function getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}

?>